diff --git a/node_modules/react-native-stopwatch-timer/lib/stopwatch.js b/node_modules/react-native-stopwatch-timer/lib/stopwatch.js
index c59be85..88522ea 100644
--- a/node_modules/react-native-stopwatch-timer/lib/stopwatch.js
+++ b/node_modules/react-native-stopwatch-timer/lib/stopwatch.js
@@ -8,7 +8,9 @@ class StopWatch extends Component {
   static propTypes = {
     start: PropTypes.bool,
     reset: PropTypes.bool,
+    show: PropTypes.bool,
     msecs: PropTypes.bool,
+    hours: PropTypes.bool,
     options: PropTypes.object,
     laps: PropTypes.bool,
     getTime: PropTypes.func,
@@ -24,11 +26,12 @@ class StopWatch extends Component {
       stopTime: null,
       pausedTime: null,
       started: false,
-      elapsed: startTime || 0,
+      elapsed: 0,
     };
     this.start = this.start.bind(this);
     this.stop = this.stop.bind(this);
     this.reset = this.reset.bind(this);
+    this.show = this.reset.bind(this);
     this.formatTime = this.formatTime.bind(this);
     const width = props.msecs ? 220 : 150;
     this.defaultStyles = {
@@ -52,48 +55,71 @@ class StopWatch extends Component {
     }
   }
 
-  componentWillReceiveProps(newProps) {
-    if(newProps.start) {
-      this.start();
-    } else {
-      this.stop();
+  componentDidUpdate(prevProps,prevState){
+    if (prevProps.start !== this.props.start) {
+      if(this.props.start){
+        this.start();
+        
+        
+      } else {
+        this.stop();
+        
+          
+        
+
+      }
     }
-    if(newProps.reset) {
-      this.reset();
+    if (prevProps.reset !== this.props.reset) {
+      if(this.props.reset) {
+        this.reset();
+      }
     }
   }
 
+  
   componentWillUnmount() {
      clearInterval(this.interval);
   }
 
   start() {
+
+    const { startTime } = this.props;
+    this.setState({
+      elapsed: startTime || 0,
+      startTime: null,
+      stopTime: null,
+      pausedTime: null
+    });
+    
     if (this.props.laps && this.state.elapsed) {
-      let lap = new Date() - this.state.stopTime;
+      let lap = stopTime;
+      this.state.elapsed=0,
       this.setState({
         stopTime: null,
         pausedTime: this.state.pausedTime + lap
+
       })
     }
     
-    this.setState({startTime: this.state.elapsed ? new Date() - this.state.elapsed :
+    this.setState({startTime: this.state.elapsed ? new Date() - 0 :
       new Date(), started: true});
       
     this.interval = this.interval ? this.interval : setInterval(() => {
         this.setState({elapsed: new Date() - this.state.startTime });
     }, 1);
+    
   }
 
   stop() {
     if(this.interval) {
       if (this.props.laps) {
         this.setState({stopTime: new Date()})
-      }
-
-      clearInterval(this.interval);
-      this.interval = null;
     }
-    this.setState({started: false});
+
+    clearInterval(this.interval);
+    this.interval = null;
+  }
+  this.setState({started: false});
   }
 
   reset() {
@@ -107,9 +133,9 @@ class StopWatch extends Component {
   }
 
   formatTime() {
-    const { getTime, getMsecs, msecs } = this.props;
+    const { getTime, getMsecs, msecs, hours } = this.props;
     const now = this.state.elapsed;
-    const formatted = formatTimeString(now, msecs);
+    const formatted = formatTimeString(now, msecs, hours);
     if (typeof getTime === "function") {
       getTime(formatted);
     }
diff --git a/node_modules/react-native-stopwatch-timer/lib/utils.js b/node_modules/react-native-stopwatch-timer/lib/utils.js
index 60bac43..22737ad 100644
--- a/node_modules/react-native-stopwatch-timer/lib/utils.js
+++ b/node_modules/react-native-stopwatch-timer/lib/utils.js
@@ -1,4 +1,4 @@
-function formatTimeString(time, showMsecs) {
+function formatTimeString(time, showMsecs, showHours) {
   let msecs = time % 1000;
 
   if (msecs < 10) {
@@ -12,18 +12,14 @@ function formatTimeString(time, showMsecs) {
   let hours = Math.floor(time / 3600000);
   seconds = seconds - minutes * 60;
   minutes = minutes - hours * 60;  
-  let formatted;
-  if (showMsecs) {
-    formatted = `${hours < 10 ? 0 : ""}${hours}:${
-      minutes < 10 ? 0 : ""
-    }${minutes}:${seconds < 10 ? 0 : ""}${seconds}:${msecs}`;
-  } else {
-    formatted = `${hours < 10 ? 0 : ""}${hours}:${
-      minutes < 10 ? 0 : ""
-    }${minutes}:${seconds < 10 ? 0 : ""}${seconds}`;
-  }
+  let formattedHours = showHours ? `${hours < 10 ? 0 : ""}${hours}:` : '';
+  let formattedMinutes = `${minutes < 10 ? 0 : ""}${minutes}:`;
+  let formattedSeconds = `${seconds < 10 ? 0 : ""}${seconds}`;
+  let formattedMsecs = showMsecs ? `:${msecs}` : '';
+
+  return `${formattedHours}${formattedMinutes}${formattedSeconds}${formattedMsecs}`;
 
-  return formatted;
 }
 
+
 export { formatTimeString };
