diff --git a/node_modules/react-native-stopwatch-timer/lib/stopwatch.js b/node_modules/react-native-stopwatch-timer/lib/stopwatch.js
index c59be85..8df94e6 100644
--- a/node_modules/react-native-stopwatch-timer/lib/stopwatch.js
+++ b/node_modules/react-native-stopwatch-timer/lib/stopwatch.js
@@ -1,3 +1,4 @@
+//testing patch
 import React, {Component} from 'react';
 import {Text, View, StyleSheet} from 'react-native';
 import PropTypes from 'prop-types';
@@ -5,131 +6,156 @@ import { formatTimeString } from './utils';
  
  
 class StopWatch extends Component {
-  static propTypes = {
-    start: PropTypes.bool,
-    reset: PropTypes.bool,
-    msecs: PropTypes.bool,
-    options: PropTypes.object,
-    laps: PropTypes.bool,
-    getTime: PropTypes.func,
-    startTime: PropTypes.number,
-    getMsecs: PropTypes.func,
-  }
-
-  constructor(props) {
-    super(props);
-    const { startTime } = props;
-    this.state = {
-      startTime: null,
-      stopTime: null,
-      pausedTime: null,
-      started: false,
-      elapsed: startTime || 0,
-    };
-    this.start = this.start.bind(this);
-    this.stop = this.stop.bind(this);
-    this.reset = this.reset.bind(this);
-    this.formatTime = this.formatTime.bind(this);
-    const width = props.msecs ? 220 : 150;
-    this.defaultStyles = {
-      container: {
-        backgroundColor: '#000',
-        padding: 5,
-        borderRadius: 5,
-        width: width,
-      },
-      text: {
-        fontSize: 30,
-        color: '#FFF',
-        marginLeft: 7,
-      }
-    };
-  }
-
-  componentDidMount() {
-    if(this.props.start) {
-      this.start();
-    }
-  }
-
-  componentWillReceiveProps(newProps) {
-    if(newProps.start) {
-      this.start();
-    } else {
-      this.stop();
-    }
-    if(newProps.reset) {
-      this.reset();
-    }
-  }
+ static propTypes = {
+   start: PropTypes.bool,
+   reset: PropTypes.bool,
+   show: PropTypes.bool,
+   msecs: PropTypes.bool,
+   hours: PropTypes.bool,
+   options: PropTypes.object,
+   laps: PropTypes.bool,
+   getTime: PropTypes.func,
+   startTime: PropTypes.number,
+   getMsecs: PropTypes.func,
+ }
+//testing change
+ constructor(props) {
+   super(props);
+   const { startTime } = props;
+   this.state = {
+     startTime: null,
+     stopTime: null,
+     pausedTime: null,
+     started: false,
+     elapsed: 0,
+   };
+   this.start = this.start.bind(this);
+   this.stop = this.stop.bind(this);
+   this.reset = this.reset.bind(this);
+   this.show = this.reset.bind(this);
+   this.formatTime = this.formatTime.bind(this);
+   const width = props.msecs ? 220 : 150;
+   this.defaultStyles = {
+     container: {
+       backgroundColor: '#000',
+       padding: 5,
+       borderRadius: 5,
+       width: width,
+     },
+     text: {
+       fontSize: 30,
+       color: '#FFF',
+       marginLeft: 7,
+     }
+   };
+ }
+ 
+ componentDidMount() {
+   if(this.props.start) {
+     this.start();
+   }
+ }
+ 
+ componentDidUpdate(prevProps,prevState){
+   if (prevProps.start !== this.props.start) {
+     if(this.props.start){
+       this.start();
+      
+      
+     } else {
+       this.stop();
+      
+        
+      
+ 
+     }
+   }
+   if (prevProps.reset !== this.props.reset) {
+     if(this.props.reset) {
+       this.reset();
+     }
+   }
+ }
  
   componentWillUnmount() {
-     clearInterval(this.interval);
-  }
-
-  start() {
-    if (this.props.laps && this.state.elapsed) {
-      let lap = new Date() - this.state.stopTime;
-      this.setState({
-        stopTime: null,
-        pausedTime: this.state.pausedTime + lap
-      })
-    }
-    
-    this.setState({startTime: this.state.elapsed ? new Date() - this.state.elapsed :
-      new Date(), started: true});
-      
-    this.interval = this.interval ? this.interval : setInterval(() => {
-        this.setState({elapsed: new Date() - this.state.startTime });
-    }, 1);
-  }
-
-  stop() {
-    if(this.interval) {
-      if (this.props.laps) {
-        this.setState({stopTime: new Date()})
-      }
-
-      clearInterval(this.interval);
-      this.interval = null;
-    }
-    this.setState({started: false});
-  }
-
-  reset() {
-    const { startTime } = this.props;
-    this.setState({
-      elapsed: startTime || 0,
-      startTime: null,
-      stopTime: null,
-      pausedTime: null
-    });
-  }
-
-  formatTime() {
-    const { getTime, getMsecs, msecs } = this.props;
-    const now = this.state.elapsed;
-    const formatted = formatTimeString(now, msecs);
-    if (typeof getTime === "function") {
-      getTime(formatted);
-    }
-    if (typeof getMsecs === "function") {
-      getMsecs(now)
-    }
-    return formatted;
-  }
-
-
-  render() {
-
-    const styles = this.props.options ? this.props.options : this.defaultStyles;
-
-    return(
-      <View ref="stopwatch" style={styles.container}>
-        <Text style={styles.text}>{this.formatTime()}</Text>
-      </View>
-    );
-  }
+    clearInterval(this.interval);
+ }
+ 
+ start() {
+ 
+   const { startTime } = this.props;
+   this.setState({
+     elapsed: startTime || 0,
+     startTime: null,
+     stopTime: null,
+     pausedTime: null
+   });
+  
+   if (this.props.laps && this.state.elapsed) {
+     let lap = stopTime;
+     this.state.elapsed=0,
+     this.setState({
+       stopTime: null,
+       pausedTime: this.state.pausedTime + lap
+ 
+     })
+   }
+  
+   this.setState({startTime: this.state.elapsed ? new Date() - 0 :
+     new Date(), started: true});
+    
+   this.interval = this.interval ? this.interval : setInterval(() => {
+       this.setState({elapsed: new Date() - this.state.startTime });
+   }, 1);
+  
+ }
+ 
+ stop() {
+   if(this.interval) {
+     if (this.props.laps) {
+       this.setState({stopTime: new Date()})
+   }
+ 
+   clearInterval(this.interval);
+   this.interval = null;
+ }
+ this.setState({started: false});
+ }
+ 
+ reset() {
+   const { startTime } = this.props;
+   this.setState({
+     elapsed: startTime || 0,
+     startTime: null,
+     stopTime: null,
+     pausedTime: null
+   });
+ }
+ 
+ formatTime() {
+   const { getTime, getMsecs, msecs, hours } = this.props;
+   const now = this.state.elapsed;
+   const formatted = formatTimeString(now, msecs, hours);
+   if (typeof getTime === "function") {
+     getTime(formatted);
+   }
+   if (typeof getMsecs === "function") {
+     getMsecs(now)
+   }
+   return formatted;
+ }
+ 
+ 
+ render() {
+ 
+   const styles = this.props.options ? this.props.options : this.defaultStyles;
+ 
+   return(
+     <View ref="stopwatch" style={styles.container}>
+       <Text style={styles.text}>{this.formatTime()}</Text>
+     </View>
+   );
+ }
 }
  
 export default StopWatch;
\ No newline at end of file
diff --git a/node_modules/react-native-stopwatch-timer/lib/utils.js b/node_modules/react-native-stopwatch-timer/lib/utils.js
index 60bac43..144db6c 100644
--- a/node_modules/react-native-stopwatch-timer/lib/utils.js
+++ b/node_modules/react-native-stopwatch-timer/lib/utils.js
@@ -1,4 +1,5 @@
-function formatTimeString(time, showMsecs) {
+//testing patch
+function formatTimeString(time, showMsecs, showHours) {
   let msecs = time % 1000;
   
   if (msecs < 10) {
@@ -12,18 +13,15 @@ function formatTimeString(time, showMsecs) {
   let hours = Math.floor(time / 3600000);
   seconds = seconds - minutes * 60;
   minutes = minutes - hours * 60;
-  let formatted;
-  if (showMsecs) {
-    formatted = `${hours < 10 ? 0 : ""}${hours}:${
-      minutes < 10 ? 0 : ""
-    }${minutes}:${seconds < 10 ? 0 : ""}${seconds}:${msecs}`;
-  } else {
-    formatted = `${hours < 10 ? 0 : ""}${hours}:${
-      minutes < 10 ? 0 : ""
-    }${minutes}:${seconds < 10 ? 0 : ""}${seconds}`;
-  }
+  let formattedHours = showHours ? `${hours < 10 ? 0 : ""}${hours}:` : '';
+  let formattedMinutes = `${minutes < 10 ? 0 : ""}${minutes}:`;
+  let formattedSeconds = `${seconds < 10 ? 0 : ""}${seconds}`;
+  let formattedMsecs = showMsecs ? `:${msecs}` : '';
+  
+  return `${formattedHours}${formattedMinutes}${formattedSeconds}${formattedMsecs}`;
+  
+ }
+  
   
-  return formatted;
-}
+ export { formatTimeString };
  
\ No newline at end of file
-export { formatTimeString };
